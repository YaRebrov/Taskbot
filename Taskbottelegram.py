import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import re
import sqlite3
from datetime import datetime
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_log.log'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
state_storage = StateMemoryStorage()
bot = telebot.TeleBot("7329953385:AAETw5G3BruiV5nYmBUyHrMnyuw_HAi6b7k", state_storage=state_storage)

# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
SENDER_ID = 1846983750
PROCESSOR_ID = 6674781903


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/whoami - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –∏ —Ä–æ–ª—å
/clear_queue - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
"""
    bot.reply_to(message, welcome_text)


# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def initialize_db():
    conn = sqlite3.connect('documents.db')
    c = conn.cursor()
    c.execute('''CREATE TABLE IF NOT EXISTS documents
                 (order_number TEXT, 
                  document_name TEXT,
                  status TEXT,
                  sender_id INTEGER,
                  timestamp DATETIME,
                  processed BOOLEAN)''')
    conn.commit()
    conn.close()


# –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def extract_order_number(filename):
    # –ü–æ–∏—Å–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ DOR-EX —Å —Ü–∏—Ñ—Ä–∞–º–∏
    patterns = [
        r'DOR[\s-]?EX[\s-]?(\d+)[\s-]?(\d+)',  # –ë–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
        r'DOR[\s-]?EX[\s-]?(\d+)[\s-]?(\d+)K\d*',  # –§–æ—Ä–º–∞—Ç —Å K –∏ —Ü–∏—Ñ—Ä–∞–º–∏ –ø–æ—Å–ª–µ
        r'DOR[\s-]?EX[-\s]?(\d+)[-\s]?(\d+).*'  # –õ—é–±–æ–π —Ñ–æ—Ä–º–∞—Ç —Å –¥–æ–ø. —Å–∏–º–≤–æ–ª–∞–º–∏ –ø–æ—Å–ª–µ
    ]

    for pattern in patterns:
        match = re.search(pattern, filename, re.IGNORECASE)
        if match:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–≤—ã–µ —á–∞—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤–∏–¥
            return f"DOR-EX {match.group(1)}-{match.group(2)}"
    return None


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
@bot.message_handler(content_types=['document'])
def handle_docs(message):
    try:
        logger.info(f"Received message from user ID: {message.from_user.id}")

        if message.from_user.id not in [SENDER_ID, PROCESSOR_ID]:
            logger.warning(f"Unauthorized access attempt from user ID: {message.from_user.id}")
            bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            return

        document_name = message.document.file_name
        order_number = extract_order_number(document_name)

        if order_number:
            conn = sqlite3.connect('documents.db')
            c = conn.cursor()

            if message.from_user.id == SENDER_ID:
                status = 'requested'
                processed = False

            else:  # Processor handling
                c.execute('''SELECT COUNT(*) 
                            FROM documents 
                            WHERE order_number = ? AND sender_id = ? AND status = 'requested' ''',
                          (order_number, SENDER_ID))
                if c.fetchone()[0] > 0:
                    c.execute('''UPDATE documents 
                               SET processed = TRUE, status = 'processed' 
                               WHERE order_number = ? AND sender_id = ?''',
                              (order_number, SENDER_ID))
                status = 'processed'
                processed = True

            c.execute('''INSERT INTO documents 
                        (order_number, document_name, status, sender_id, timestamp, processed) 
                        VALUES (?, ?, ?, ?, ?, ?)''',
                      (order_number, document_name, status, message.from_user.id,
                       datetime.now(), processed))

            conn.commit()
            conn.close()

        else:
            bot.reply_to(message,
                         f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞\n"
                         f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_name}\n"
                         f"‚ö†Ô∏è –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: DOR-EX XXX-XX")

    except Exception as e:
        logger.error(f"Error processing document: {str(e)}")
        error_message = (f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.\n"
                         f"üìÑ –ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {document_name}\n"
                         f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number if 'order_number' in locals() else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")
        bot.reply_to(message, error_message)


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
@bot.message_handler(commands=['clear_queue'])
def clear_queue(message):
    try:
        if message.from_user.id not in [SENDER_ID, PROCESSOR_ID]:
            bot.reply_to(message, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á.")
            return

        conn = sqlite3.connect('documents.db')
        c = conn.cursor()
        c.execute('''DELETE FROM documents''')  # –û—á–∏—â–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏
        conn.commit()
        conn.close()

        logger.info(f"Queue cleared by user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error clearing queue: {str(e)}")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['status'])
def get_status(message):
    try:
        conn = sqlite3.connect('documents.db')
        c = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        c.execute('''SELECT DISTINCT order_number FROM documents 
                    WHERE sender_id = ? AND status = 'requested' ''', (SENDER_ID,))
        requested_orders = c.fetchall()

        # –ü–æ–ª—É—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        c.execute('''SELECT DISTINCT order_number FROM documents 
                    WHERE sender_id = ? AND status = 'processed' ''', (SENDER_ID,))
        processed_orders = c.fetchall()

        # –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–¥–∞—á
        requested_count = len(requested_orders)
        processed_count = len(processed_orders)

        response = "üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"

        response += "‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        for order in requested_orders:
            response += f"{order[0]}\n"

        response += "\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n"
        for order in processed_orders:
            response += f"{order[0]}\n"

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        response += f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–∂–∏–¥–∞–µ—Ç/–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): {requested_count}/{processed_count}"

        bot.reply_to(message, response)
        conn.close()

    except Exception as e:
        logger.error(f"Error generating status: {str(e)}")
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ID –∏ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(commands=['whoami'])
def whoami(message):
    user_id = message.from_user.id
    user_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_id == SENDER_ID:
        user_type = "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–¥–∞–Ω–∏–π"
    elif user_id == PROCESSOR_ID:
        user_type = "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π"

    bot.reply_to(message, f"–í–∞—à ID: {user_id}\n–í–∞—à–∞ —Ä–æ–ª—å: {user_type}")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    try:
        initialize_db()
        logger.info("Bot started")
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"Bot error: {str(e)}")


if __name__ == '__main__':
    main()