import telebot
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage
import re
import sqlite3
from datetime import datetime, timedelta  # Added timedelta for time calculations
import logging
from collections import defaultdict
import sys
import signal
import time
import threading
import pandas as pd  # Added for export functionality
import tempfile
import os

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename='bot_log.log'
)
logger = logging.getLogger(__name__)

ADMIN_ID = 442780487  # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
SENDER_ID = 1846983750  # –ú–µ–Ω–µ–¥–∂–µ—Ä
PROCESSOR_ID = 6674781903  # –ë—É—Ö–≥–∞–ª—Ç–µ—Ä

state_storage = StateMemoryStorage()
bot = telebot.TeleBot("7329953385:AAETw5G3BruiV5nYmBUyHrMnyuw_HAi6b7k", state_storage=state_storage)


def send_timed_admin_message(message, seconds=5):
    try:
        sent_message = bot.send_message(ADMIN_ID, message)

        def update_timer():
            remaining_time = seconds - 1
            while remaining_time > 0:
                time.sleep(1)
                remaining_time -= 1
                try:
                    updated_message = message + f"\n\n‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥"
                    bot.edit_message_text(
                        updated_message,
                        ADMIN_ID,
                        sent_message.message_id
                    )
                except Exception as e:
                    logger.error(f"Error updating admin message timer: {str(e)}")
                    break

            try:
                bot.delete_message(ADMIN_ID, sent_message.message_id)
            except Exception as e:
                logger.error(f"Error deleting admin message: {str(e)}")

        timer_thread = threading.Thread(target=update_timer)
        timer_thread.start()

    except Exception as e:
        logger.error(f"Error sending timed admin message: {str(e)}")


def send_admin_log(message):
    try:
        if "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω" in message:  # Don't auto-delete the bot startup message
            bot.send_message(ADMIN_ID, message)
        else:
            send_timed_admin_message(message)
    except Exception as e:
        logger.error(f"Error sending admin log: {str(e)}")


def signal_handler(signum, frame):
    logger.info("Received signal to terminate. Stopping bot gracefully...")
    bot.stop_polling()
    sys.exit(0)


signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


def initialize_db():
    conn = sqlite3.connect('documents.db')
    c = conn.cursor()

    # Create tasks table
    c.execute('''CREATE TABLE IF NOT EXISTS tasks
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  order_number TEXT NOT NULL,
                  status TEXT NOT NULL,
                  created_at DATETIME NOT NULL,
                  processed_at DATETIME,
                  sender_id INTEGER NOT NULL,
                  processor_id INTEGER)''')

    # Create documents table to track individual files
    c.execute('''CREATE TABLE IF NOT EXISTS task_documents
                 (id INTEGER PRIMARY KEY AUTOINCREMENT,
                  task_id INTEGER,
                  document_name TEXT NOT NULL,
                  uploaded_by INTEGER NOT NULL,
                  uploaded_at DATETIME NOT NULL,
                  FOREIGN KEY (task_id) REFERENCES tasks(id))''')

    conn.commit()
    conn.close()


def create_temp_message_db():
    try:
        temp_dir = tempfile.gettempdir()
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        db_path = os.path.join(temp_dir, f'temp_messages_{timestamp}.db')

        conn = sqlite3.connect(db_path)
        c = conn.cursor()

        # Simplified messages table
        c.execute('''CREATE TABLE IF NOT EXISTS messages
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      message_id INTEGER,
                      user_id INTEGER,
                      document_name TEXT,
                      timestamp DATETIME)''')

        conn.commit()
        conn.close()
        return db_path
    except Exception as e:
        logger.error(f"Error creating temp database: {str(e)}")
        raise


class AdminStates(StatesGroup):
    viewing_messages = State()
    selecting_order = State()


@bot.message_handler(commands=['start'])
def send_welcome(message):
    if message.from_user.id == ADMIN_ID:
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! 
ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/whoami - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –∏ —Ä–æ–ª—å
/clear_queue - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
/view_sender_messages - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
/add_task <–Ω–æ–º–µ—Ä> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
/check_group - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞
/check_connection - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
/view_logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞ –±–æ—Ç–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Excel
/check_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–Ω–æ–≤–∞

‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
"""
    else:
        welcome_text = """
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! 
ü§ñ –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
/whoami - –£–∑–Ω–∞—Ç—å —Å–≤–æ–π ID –∏ —Ä–æ–ª—å
/clear_queue - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
/check_group - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞
/check_connection - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
/check_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç

‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
"""
    sent_message = bot.reply_to(message, welcome_text)

    def update_timer():
        remaining_time = 14
        while remaining_time > 0:
            time.sleep(1)
            remaining_time -= 1
            try:
                updated_text = welcome_text.replace(
                    "‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥",
                    f"‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥"
                )
                bot.edit_message_text(
                    updated_text,
                    message.chat.id,
                    sent_message.message_id
                )
            except Exception as e:
                logger.error(f"Error updating welcome message timer: {str(e)}")
                break

        try:
            bot.delete_message(message.chat.id, message.message_id)
            bot.delete_message(message.chat.id, sent_message.message_id)
        except Exception as e:
            logger.error(f"Error deleting welcome messages: {str(e)}")

    timer_thread = threading.Thread(target=update_timer)
    timer_thread.start()


@bot.message_handler(commands=['view_sender_messages'], func=lambda message: message.from_user.id == ADMIN_ID)
def view_sender_messages(message):
    try:
        chat_id = message.chat.id
        logger.info(f"Starting view_sender_messages. chat_id={chat_id}, SENDER_ID={SENDER_ID}")
        conn = sqlite3.connect('documents.db')
        c = conn.cursor()

        # First check if we have any messages at all
        c.execute('SELECT COUNT(*) FROM task_documents')
        total_count = c.fetchone()[0]
        logger.info(f"Total messages in database: {total_count}")

        # Log messages for this sender
        c.execute('SELECT COUNT(*) FROM task_documents WHERE uploaded_by = ?', (SENDER_ID,))
        sender_count = c.fetchone()[0]
        logger.info(f"Total messages from sender {SENDER_ID}: {sender_count}")

        # Modified query - remove chat_id filter to see all messages
        sender_messages = c.execute('''SELECT document_name, uploaded_at, uploaded_by 
                                     FROM task_documents 
                                     WHERE uploaded_by = ?
                                     ORDER BY uploaded_at DESC LIMIT 20''',
                                    (SENDER_ID,)).fetchall()

        logger.info(f"Found {len(sender_messages)} messages matching criteria")

        if not sender_messages:
            bot.send_message(ADMIN_ID, "üì≠ –°–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:\n\n"
        valid_orders = []

        for idx, (doc_name, timestamp, msg_uploaded_by) in enumerate(sender_messages, 1):
            order_number = extract_order_number(doc_name)
            if order_number:
                dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S.%f')
                formatted_time = dt.strftime('%d.%m.%Y %H:%M')
                response += f"{idx}. üìÑ {order_number}\n"
                response += f"   üìé –§–∞–π–ª: {doc_name}\n"
                response += f"   üïí {formatted_time}\n"
                response += f"   üë• –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {msg_uploaded_by}\n\n"
                valid_orders.append((idx, order_number))

        if valid_orders:
            response += "\nüìù –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            response += "/add_task <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏>"
        else:
            response += "\n‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤"

        bot.send_message(ADMIN_ID, response)
        bot.set_state(message.from_user.id, AdminStates.viewing_messages)

        conn.close()
    except Exception as e:
        logger.error(f"Error viewing sender messages: {str(e)}")
        bot.send_message(ADMIN_ID, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")


@bot.message_handler(commands=['add_task'], func=lambda message: message.from_user.id == ADMIN_ID)
def add_task_command(message):
    try:
        args = message.text.split()
        if len(args) != 2:
            bot.send_message(ADMIN_ID, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /add_task <–Ω–æ–º–µ—Ä_—Å—Ç—Ä–æ–∫–∏>")
            return

        try:
            message_index = int(args[1]) - 1
        except ValueError:
            bot.send_message(ADMIN_ID, "‚ùå –ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return

        conn = sqlite3.connect('documents.db')
        c = conn.cursor()

        # Fetch the last uploaded document
        sender_message = c.execute('''SELECT document_name 
                                    FROM task_documents 
                                    WHERE uploaded_by = ? 
                                    ORDER BY uploaded_at DESC LIMIT ?, 1''',
                                   (SENDER_ID, message_index)).fetchone()

        if not sender_message:
            bot.send_message(ADMIN_ID, "‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return

        document_name = sender_message[0]
        order_number = extract_order_number(document_name)

        if not order_number:
            bot.send_message(ADMIN_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞")
            return

        c.execute('''INSERT INTO tasks 
                    (order_number, status, created_at, sender_id)
                    VALUES (?, ?, ?, ?)''',
                  (order_number, 'waiting', datetime.now(), SENDER_ID))

        conn.commit()
        conn.close()

        admin_message = f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é\n" \
                        f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n" \
                        f"–î–æ–∫—É–º–µ–Ω—Ç: {document_name}"
        bot.send_message(ADMIN_ID, admin_message)

    except Exception as e:
        logger.error(f"Error adding task: {str(e)}")


def extract_order_number(filename):
    try:
        patterns = [
            r'DOR[\s-]*EX[\s-]*(\d+)[\s-]*(\d+)',
            r'DOR[\s-]*EX[\s-]*(\d+)[\s-]*(\d+)[kK–∫–ö]\d*',
            r'DOR[\s-]*EX[\s-]*(\d+)[\s-]*(\d+).*'
        ]

        for pattern in patterns:
            match = re.search(pattern, filename, re.IGNORECASE)
            if match:
                return f"DOR-EX {match.group(1)}-{match.group(2)}"
        return None
    except Exception as e:
        logger.error(f"Error extracting order number: {str(e)}")
        return None


@bot.message_handler(content_types=['document'])
def handle_docs(message):
    try:
        document_name = message.document.file_name
        order_number = extract_order_number(document_name)
        user_id = message.from_user.id

        if not order_number:
            return

        conn = sqlite3.connect('documents.db')
        c = conn.cursor()

        if user_id == SENDER_ID:
            # Check if task already exists
            c.execute('SELECT id, status FROM tasks WHERE order_number = ? ORDER BY created_at DESC LIMIT 1',
                      (order_number,))
            existing_task = c.fetchone()

            if not existing_task or existing_task[1] == 'processed':
                # Create new task
                c.execute('''INSERT INTO tasks 
                            (order_number, status, created_at, sender_id)
                            VALUES (?, ?, ?, ?)''',
                          (order_number, 'waiting', datetime.now(), SENDER_ID))
                task_id = c.lastrowid

                # Add document record
                c.execute('''INSERT INTO task_documents 
                            (task_id, document_name, uploaded_by, uploaded_at)
                            VALUES (?, ?, ?, ?)''',
                          (task_id, document_name, SENDER_ID, datetime.now()))

                admin_message = f"üì• –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n" \
                                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n" \
                                f"–î–æ–∫—É–º–µ–Ω—Ç: {document_name}"
                send_timed_admin_message(admin_message)

            else:
                # Just add document to existing task
                c.execute('''INSERT INTO task_documents 
                            (task_id, document_name, uploaded_by, uploaded_at)
                            VALUES (?, ?, ?, ?)''',
                          (existing_task[0], document_name, SENDER_ID, datetime.now()))

        elif user_id == PROCESSOR_ID:
            # Find waiting task
            c.execute('''UPDATE tasks 
                        SET status = 'processed', 
                            processed_at = ?, 
                            processor_id = ?
                        WHERE order_number = ? 
                        AND status = 'waiting' ''',
                      (datetime.now(), PROCESSOR_ID, order_number))

            if c.rowcount > 0:
                # Add processor's document
                task_id = c.execute('SELECT id FROM tasks WHERE order_number = ? ORDER BY created_at DESC LIMIT 1',
                                    (order_number,)).fetchone()[0]

                c.execute('''INSERT INTO task_documents 
                            (task_id, document_name, uploaded_by, uploaded_at)
                            VALUES (?, ?, ?, ?)''',
                          (task_id, document_name, PROCESSOR_ID, datetime.now()))

                admin_message = f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n" \
                                f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {order_number}\n" \
                                f"–û–±—Ä–∞–±–æ—Ç—á–∏–∫ ID: {PROCESSOR_ID}"
                send_timed_admin_message(admin_message)

        conn.commit()
        conn.close()

    except Exception as e:
        logger.error(f"Error handling document: {str(e)}")
        send_timed_admin_message(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}")


@bot.message_handler(commands=['clear_queue'])
def clear_queue(message):
    try:
        conn = sqlite3.connect('documents.db')
        c = conn.cursor()
        c.execute('''DELETE FROM tasks''')
        c.execute('''DELETE FROM task_documents''')
        conn.commit()
        conn.close()

        admin_message = f"üóë –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω–∞\n" \
                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {message.from_user.id}"
        send_timed_admin_message(admin_message)
        logger.info(f"Queue cleared by user {message.from_user.id}")

    except Exception as e:
        logger.error(f"Error clearing queue: {str(e)}")


@bot.message_handler(commands=['status'])
def get_status(message):
    try:
        conn = sqlite3.connect('documents.db')
        c = conn.cursor()

        # Get waiting tasks
        c.execute('''SELECT order_number, created_at FROM tasks 
                    WHERE status = 'waiting' 
                    ORDER BY created_at''')
        waiting_tasks = c.fetchall()

        # Get processed tasks
        c.execute('''SELECT order_number, processed_at FROM tasks 
                    WHERE status = 'processed' 
                    ORDER BY processed_at DESC''')
        processed_tasks = c.fetchall()

        response = "üìã –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:\n\n"

        response += "‚è≥ –û–∂–∏–¥–∞—é—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n"
        for task in waiting_tasks:
            created_at = datetime.strptime(task[1], '%Y-%m-%d %H:%M:%S.%f')
            response += f"‚Ä¢ {task[0]} (–æ—Ç {created_at.strftime('%d.%m.%Y %H:%M')})\n"

        response += "\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ:\n"
        for task in processed_tasks:
            processed_at = datetime.strptime(task[1], '%Y-%m-%d %H:%M:%S.%f')
            response += f"‚Ä¢ {task[0]} (–≤ {processed_at.strftime('%d.%m.%Y %H:%M')})\n"

        response += f"\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–æ–∂–∏–¥–∞–µ—Ç/–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ): {len(waiting_tasks)}/{len(processed_tasks)}"

        sent_message = bot.reply_to(message, response)

        # Add deletion timer
        def delete_timer():
            time.sleep(15)
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, sent_message.message_id)
            except Exception as e:
                logger.error(f"Error deleting status messages: {str(e)}")

        threading.Thread(target=delete_timer).start()

        conn.close()

    except Exception as e:
        logger.error(f"Error generating status: {str(e)}")


@bot.message_handler(commands=['whoami'])
def whoami(message):
    user_id = message.from_user.id
    user_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    if user_id == SENDER_ID:
        user_type = "–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∑–∞–¥–∞–Ω–∏–π"
    elif user_id == PROCESSOR_ID:
        user_type = "–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–¥–∞–Ω–∏–π"
    elif user_id == ADMIN_ID:
        user_type = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

    bot.reply_to(message, f"–í–∞—à ID: {user_id}\n–í–∞—à–∞ —Ä–æ–ª—å: {user_type}")


@bot.message_handler(commands=['check_group'])
def check_group(message):
    try:
        chat_id = message.chat.id
        chat_type = message.chat.type
        response = f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\nID: {chat_id}\n–¢–∏–ø: {chat_type}"
        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"Error checking group ID: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ")


@bot.message_handler(commands=['help'], func=lambda message: message.from_user.id == ADMIN_ID)
def admin_help(message):
    help_text = """
üë®‚Äçüíº –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

/view_sender_messages - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
/add_task <–Ω–æ–º–µ—Ä> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∑–∞–¥–∞—á
/clear_queue - –û—á–∏—Å—Ç–∏—Ç—å –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
/clear_db - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
/check_group - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å ID —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã/—á–∞—Ç–∞
/check_connection - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
/view_logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞ –±–æ—Ç–∞
/export - –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤ Excel
/check_groups - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤ –≥–¥–µ –µ—Å—Ç—å –±–æ—Ç
/verify_tasks - –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
/check_last_messages - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ

‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
"""
    # Send and start deletion timer
    sent_message = bot.send_message(ADMIN_ID, help_text)


@bot.message_handler(commands=['export'], func=lambda message: message.from_user.id == ADMIN_ID)
def export_database(message):
    try:
        conn = sqlite3.connect('documents.db')

        # Get tasks with their documents and calculate processing time
        tasks_df = pd.read_sql_query('''
            SELECT 
                t.id as "ID –∑–∞–¥–∞—á–∏",
                t.order_number as "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞",
                CASE 
                    WHEN t.status = 'waiting' THEN '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏'
                    WHEN t.status = 'processed' THEN '–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ'
                    ELSE t.status 
                END as "–°—Ç–∞—Ç—É—Å",
                t.created_at as "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
                t.processed_at as "–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏",
                CASE 
                    WHEN t.sender_id = 1846983750 THEN '–ú–µ–Ω–µ–¥–∂–µ—Ä'
                    ELSE t.sender_id 
                END as "–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å",
                CASE 
                    WHEN t.processor_id = 6674781903 THEN '–ë—É—Ö–≥–∞–ª—Ç–µ—Ä'
                    ELSE t.processor_id 
                END as "–û–±—Ä–∞–±–æ—Ç—á–∏–∫",
                GROUP_CONCAT(td.document_name, '; ') as "–î–æ–∫—É–º–µ–Ω—Ç—ã"
            FROM tasks t
            LEFT JOIN task_documents td ON t.id = td.task_id
            GROUP BY t.id
        ''', conn)

        # Calculate processing time for completed tasks
        def calculate_processing_time(row):
            if pd.isna(row['–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏']) or pd.isna(row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']):
                return ''
            created = pd.to_datetime(row['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'])
            processed = pd.to_datetime(row['–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏'])
            delta = processed - created
            hours = int(delta.total_seconds() // 3600)
            minutes = int((delta.total_seconds() % 3600) // 60)
            seconds = int(delta.total_seconds() % 60)
            return f'{hours:02d}:{minutes:02d}:{seconds:02d}'

        tasks_df['–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = tasks_df.apply(calculate_processing_time, axis=1)

        # Format dates
        tasks_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'] = pd.to_datetime(tasks_df['–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è']).dt.strftime('%d.%m.%Y %H:%M:%S')
        tasks_df['–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = pd.to_datetime(tasks_df['–î–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏']).fillna('').dt.strftime(
            '%d.%m.%Y %H:%M:%S')

        # Export to Excel with custom formatting
        export_path = 'tasks_export.xlsx'
        with pd.ExcelWriter(export_path, engine='xlsxwriter') as writer:
            tasks_df.to_excel(writer, index=False, sheet_name='–ó–∞–¥–∞—á–∏')

            # Get workbook and worksheet
            workbook = writer.book
            worksheet = writer.sheets['–ó–∞–¥–∞—á–∏']

            # Add formats
            header_format = workbook.add_format({
                'bold': True,
                'bg_color': '#D9EAD3',
                'border': 1
            })

            # Apply formats
            for col_num, value in enumerate(tasks_df.columns.values):
                worksheet.write(0, col_num, value, header_format)
                worksheet.set_column(col_num, col_num, 20)  # Set column width

        # Send file to admin
        with open(export_path, 'rb') as file:
            bot.send_document(ADMIN_ID, file, caption="üìä –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

        # Cleanup
        import os
        os.remove(export_path)

    except Exception as e:
        logger.error(f"Error exporting database: {str(e)}")
        bot.send_message(ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


@bot.message_handler(commands=['clear_db'], func=lambda message: message.from_user.id == ADMIN_ID)
def clear_database(message):
    try:
        # Ask for confirmation
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(
            telebot.types.InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_db_confirm"),
            telebot.types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clear_db_cancel")
        )
        bot.reply_to(message, "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?", reply_markup=markup)
    except Exception as e:
        logger.error(f"Error initiating database clear: {str(e)}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


@bot.callback_query_handler(func=lambda call: call.data.startswith("clear_db_"))
def clear_db_callback(call):
    try:
        if call.data == "clear_db_confirm":
            conn = sqlite3.connect('documents.db')
            c = conn.cursor()
            c.execute('DELETE FROM tasks')
            c.execute('DELETE FROM task_documents')
            conn.commit()
            conn.close()

            bot.edit_message_text(
                "‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞",
                call.message.chat.id,
                call.message.message_id
            )

            # Log the action
            admin_message = f"üóë –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n" \
                            f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {call.from_user.id}"
            send_timed_admin_message(admin_message)
            logger.info(f"Database cleared by admin {call.from_user.id}")

        elif call.data == "clear_db_cancel":
            bot.edit_message_text(
                "‚ùå –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –æ—Ç–º–µ–Ω–µ–Ω–∞",
                call.message.chat.id,
                call.message.message_id
            )

    except Exception as e:
        logger.error(f"Error clearing database: {str(e)}")
        bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")


@bot.message_handler(commands=['view_logs'], func=lambda message: message.from_user.id == ADMIN_ID)
def view_logs(message):
    try:
        with open('bot_log.log', 'r') as log_file:
            # Get last 20 lines of logs
            logs = log_file.readlines()[-20:]

        response = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞:\n\n"
        for log in logs:
            response += f"{log.strip()}\n"

        sent_message = bot.send_message(ADMIN_ID, response)

        # Add deletion timer
        def delete_timer():
            time.sleep(15)
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, sent_message.message_id)
            except Exception as e:
                logger.error(f"Error deleting log messages: {str(e)}")

        threading.Thread(target=delete_timer).start()

    except Exception as e:
        logger.error(f"Error viewing logs: {str(e)}")
        bot.send_message(ADMIN_ID, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤")


@bot.message_handler(commands=['check_connection'])
def check_connection(message):
    try:
        # Get chat info
        chat_id = message.chat.id
        chat = bot.get_chat(chat_id)
        chat_name = chat.title if chat.title else "Unnamed group"

        response = f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ:\n\n"
        response += f"üì¢ –ì—Ä—É–ø–ø–∞: {chat_name}\n"
        response += f"üÜî ID –≥—Ä—É–ø–ø—ã: {chat_id}\n\n"
        response += "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π:\n\n"

        messages = []
        try:
            current_msg_id = message.message_id
            for _ in range(20):
                try:
                    msg = bot.forward_message(chat_id=chat_id,
                                              from_chat_id=chat_id,
                                              message_id=current_msg_id)
                    messages.append(msg)
                    bot.delete_message(chat_id, msg.message_id)  # Delete forwarded message
                except:
                    break
                current_msg_id -= 1
        except Exception as e:
            logger.error(f"Error getting messages: {str(e)}")

        for msg in messages:
            sender = msg.from_user.username if msg.from_user and msg.from_user.username else str(
                msg.from_user.id) if msg.from_user else "Unknown"
            content_type = "üìÑ –î–æ–∫—É–º–µ–Ω—Ç" if msg.document else "üí¨ –¢–µ–∫—Å—Ç" if msg.text else "‚ùì –î—Ä—É–≥–æ–µ"
            time_str = msg.date.strftime("%d.%m.%Y %H:%M")

            response += f"‚Ä¢ {time_str} | @{sender} | {content_type}\n"
            if msg.document:
                response += f"  üìé –§–∞–π–ª: {msg.document.file_name}\n"
            elif msg.text:
                preview = msg.text[:50] + "..." if len(msg.text) > 50 else msg.text
                response += f"  üìù –¢–µ–∫—Å—Ç: {preview}\n"
            response += "\n"

        # Send with auto-delete timer
        sent_message = bot.reply_to(message, response)

        def delete_timer():
            remaining_time = 14
            while remaining_time > 0:
                time.sleep(1)
                remaining_time -= 1
                try:
                    updated_response = response + f"\n‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥"
                    bot.edit_message_text(
                        updated_response,
                        message.chat.id,
                        sent_message.message_id
                    )
                except Exception as e:
                    logger.error(f"Error updating connection check timer: {str(e)}")
                    break

            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, sent_message.message_id)
            except Exception as e:
                logger.error(f"Error deleting connection check messages: {str(e)}")

        timer_thread = threading.Thread(target=delete_timer)
        timer_thread.start()

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n{str(e)}"
        logger.error(error_msg)
        bot.reply_to(message, error_msg)


@bot.message_handler(commands=['check_groups'])
def check_all_groups(message):
    try:
        if message.from_user.id != ADMIN_ID:
            return

        response = "üìã –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –∫–∞–Ω–∞–ª–æ–≤:\n\n"
        added_chats = set()

        # First check current chat
        current_chat = bot.get_chat(message.chat.id)
        if current_chat.type in ['group', 'supergroup', 'channel']:
            chat_info = f"‚Ä¢ {current_chat.type.upper()}\n"
            chat_info += f"  üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {current_chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
            chat_info += f"  üÜî ID: {current_chat.id}\n"
            chat_info += f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {bot.get_chat_member_count(current_chat.id)}\n"
            response += chat_info + "\n"
            added_chats.add(current_chat.id)

        # Try to get bot's chat member updates
        for chat_id in [-1002361511573]:  # Add known GROUP_ID
            if chat_id in added_chats:
                continue
            try:
                chat = bot.get_chat(chat_id)
                if chat.type in ['group', 'supergroup', 'channel']:
                    chat_info = f"‚Ä¢ {chat.type.upper()}\n"
                    chat_info += f"  üì¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title or '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\n"
                    chat_info += f"  üÜî ID: {chat.id}\n"
                    chat_info += f"  üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {bot.get_chat_member_count(chat.id)}\n"
                    response += chat_info + "\n"
            except Exception as e:
                logger.error(f"Error getting chat {chat_id} info: {str(e)}")

        # Add note if no groups found
        if not response.strip():
            response = "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ"

        # Send response with auto-delete timer
        sent_message = bot.send_message(message.chat.id, response)

        def delete_timer():
            remaining_time = 14
            while remaining_time > 0:
                time.sleep(1)
                remaining_time -= 1
                try:
                    updated_response = response + f"\n\n‚è± –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥"
                    bot.edit_message_text(
                        updated_response,
                        message.chat.id,
                        sent_message.message_id
                    )
                except Exception as e:
                    logger.error(f"Error updating groups list timer: {str(e)}")
                    break

            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, sent_message.message_id)
            except Exception as e:
                logger.error(f"Error deleting groups list messages: {str(e)}")

        timer_thread = threading.Thread(target=delete_timer)
        timer_thread.start()

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø:\n{str(e)}"
        logger.error(error_msg)
        bot.send_message(ADMIN_ID, error_msg)


@bot.message_handler(commands=['verify_tasks'], func=lambda message: message.from_user.id == ADMIN_ID)
def verify_tasks(message):
    try:
        GROUP_ID = -1002361511573  # The supergroup ID where bot is added
        initial_response = "üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ...\n\n"
        progress_message = bot.send_message(ADMIN_ID, initial_response)

        # Create temporary database
        temp_db_path = create_temp_message_db()
        conn = sqlite3.connect(temp_db_path)
        c = conn.cursor()

        try:
            chat = bot.get_chat(GROUP_ID)
            status_text = f"üì¢ –ì—Ä—É–ø–ø–∞: {chat.title}\n"
            status_text += f"üÜî ID –≥—Ä—É–ø–ø—ã: {GROUP_ID}\n\n"

            bot.edit_message_text(initial_response + status_text + "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...",
                                  ADMIN_ID,
                                  progress_message.message_id)

            messages_checked = 0
            messages_found = 0
            five_hours_ago = datetime.now() - timedelta(hours=5)

            try:
                # Get messages using get_chat_history
                messages = bot.get_chat_history(GROUP_ID, limit=1000)

                for msg in messages:
                    msg_time = datetime.fromtimestamp(msg.date)

                    # Stop if message is older than 5 hours
                    if msg_time < five_hours_ago:
                        break

                    messages_checked += 1

                    # Store in temporary database
                    c.execute('''INSERT INTO messages 
                                (message_id, user_id, document_name, timestamp)
                                VALUES (?, ?, ?, ?)''',
                              (msg.message_id,
                               msg.from_user.id if msg.from_user else None,
                               msg.document.file_name if msg.document else None,
                               msg_time))

                    messages_found += 1
                    conn.commit()

                    if messages_checked % 5 == 0:
                        status = (f"{status_text}"
                                  f"üì® –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_checked}\n"
                                  f"üì• –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}\n"
                                  f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
                        bot.edit_message_text(status, ADMIN_ID, progress_message.message_id)

                    # Send message info with auto-delete
                    msg_info = f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ #{msg.message_id}\n"
                    if msg.from_user:
                        msg_info += f"üë§ –û—Ç: {msg.from_user.username or msg.from_user.id}\n"
                    if msg.document:
                        msg_info += f"üìé –§–∞–π–ª: {msg.document.file_name}\n"
                    msg_info += f"üïí –í—Ä–µ–º—è: {msg_time.strftime('%d.%m.%Y %H:%M')}"

                    info_message = bot.send_message(ADMIN_ID, msg_info)
                    threading.Thread(target=lambda: (time.sleep(2),
                                                     bot.delete_message(ADMIN_ID, info_message.message_id))).start()

            except Exception as e:
                logger.error(f"Error getting chat history: {str(e)}")
                # Fallback to older method if get_chat_history fails
                current_msg_id = message.message_id
                while messages_checked < 1000:
                    try:
                        msg = bot.copy_message(
                            chat_id=ADMIN_ID,
                            from_chat_id=GROUP_ID,
                            message_id=current_msg_id,
                            disable_notification=True
                        )

                        msg_time = datetime.fromtimestamp(msg.date)

                        if msg_time < five_hours_ago:
                            bot.delete_message(ADMIN_ID, msg.message_id)
                            break

                        # Store message in database
                        c.execute('''INSERT INTO messages 
                                    (message_id, user_id, document_name, timestamp)
                                    VALUES (?, ?, ?, ?)''',
                                  (msg.message_id,
                                   msg.from_user.id if msg.from_user else None,
                                   msg.document.file_name if msg.document else None,
                                   msg_time))

                        messages_found += 1
                        conn.commit()

                        # Delete copied message
                        bot.delete_message(ADMIN_ID, msg.message_id)

                    except Exception as e:
                        logger.debug(f"Message {current_msg_id} not found: {str(e)}")

                    current_msg_id -= 1
                    messages_checked += 1

                    if messages_checked % 5 == 0:
                        status = (f"{status_text}"
                                  f"üì® –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_checked}\n"
                                  f"üì• –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}\n"
                                  f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
                        bot.edit_message_text(status, ADMIN_ID, progress_message.message_id)

            # Generate report
            df = pd.read_sql_query('''
                SELECT 
                    user_id AS "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    document_name AS "–ò–º—è –¥–æ–∫—É–º–µ–Ω—Ç–∞",
                    datetime(timestamp, 'localtime') AS "–í—Ä–µ–º—è —Å–æ–æ–±—â–µ–Ω–∏—è"
                FROM messages 
                WHERE timestamp >= datetime('now', '-5 hours')
                ORDER BY timestamp DESC
            ''', conn)

            # Export to Excel
            export_path = 'message_analysis.xlsx'
            df.to_excel(export_path, index=False)

            final_status = (f"{status_text}"
                            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                            f"üì® –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {messages_checked}\n"
                            f"üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_found}")

            bot.edit_message_text(final_status, ADMIN_ID, progress_message.message_id)

            with open(export_path, 'rb') as file:
                bot.send_document(
                    ADMIN_ID,
                    file,
                    caption=f"üìä –û—Ç—á–µ—Ç –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π\n"
                            f"üìÇ –í—Ä–µ–º–µ–Ω–Ω–∞—è –±–∞–∑–∞: {os.path.basename(temp_db_path)}"
                )

            os.remove(export_path)

        except Exception as e:
            logger.error(f"Error in verification process: {str(e)}")
            bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {str(e)}",
                                  ADMIN_ID,
                                  progress_message.message_id)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}"
        logger.error(error_msg)
        bot.send_message(ADMIN_ID, error_msg)


@bot.message_handler(commands=['check_last_messages'], func=lambda message: message.from_user.id == ADMIN_ID)
def check_last_messages(message):
    try:
        GROUP_ID = -1002361511573

        status = "üîÑ –ü–æ–ª—É—á–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø—ã..."
        progress_message = bot.send_message(ADMIN_ID, status)

        messages_found = []

        # Get chat info first
        chat = bot.get_chat(GROUP_ID)

        # Get chat administrators to verify bot permissions
        admins = bot.get_chat_administrators(GROUP_ID)
        bot_admin = next((admin for admin in admins if admin.user.id == bot.get_me().id), None)

        if not bot_admin:
            raise Exception("–ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã")

        # Get last messages using get_chat_history
        try:
            messages = bot.get_chat_history(GROUP_ID, limit=10)

            for msg in messages:
                msg_time = datetime.fromtimestamp(msg.date)
                msg_info = f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ #{msg.message_id}\n"

                if msg.from_user:
                    msg_info += f"üë§ –û—Ç: {msg.from_user.username or msg.from_user.id}\n"

                if msg.document:
                    msg_info += f"üìé –§–∞–π–ª: {msg.document.file_name}\n"
                elif msg.text:
                    msg_info += f"üí¨ –¢–µ–∫—Å—Ç: {msg.text[:100]}...\n" if len(msg.text) > 100 else f"üí¨ –¢–µ–∫—Å—Ç: {msg.text}\n"

                msg_info += f"üïí –í—Ä–µ–º—è: {msg_time.strftime('%d.%m.%Y %H:%M')}\n"
                msg_info += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

                messages_found.append(msg_info)

        except Exception as e:
            # Fallback to alternative method if get_chat_history fails
            current_msg_id = message.message_id
            for _ in range(10):
                try:
                    msg = bot.copy_message(
                        chat_id=ADMIN_ID,
                        from_chat_id=GROUP_ID,
                        message_id=current_msg_id,
                        disable_notification=True
                    )

                    msg_time = datetime.fromtimestamp(msg.date)
                    msg_info = f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ #{msg.message_id}\n"

                    if msg.from_user:
                        msg_info += f"üë§ –û—Ç: {msg.from_user.username or msg.from_user.id}\n"

                    if msg.document:
                        msg_info += f"üìé –§–∞–π–ª: {msg.document.file_name}\n"
                    elif msg.text:
                        msg_info += f"üí¨ –¢–µ–∫—Å—Ç: {msg.text[:100]}...\n" if len(
                            msg.text) > 100 else f"üí¨ –¢–µ–∫—Å—Ç: {msg.text}\n"

                    msg_info += f"üïí –í—Ä–µ–º—è: {msg_time.strftime('%d.%m.%Y %H:%M')}\n"
                    msg_info += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

                    messages_found.append(msg_info)

                    # Delete copied message
                    bot.delete_message(ADMIN_ID, msg.message_id)

                except Exception as e:
                    logger.debug(f"Message {current_msg_id} not found: {str(e)}")

                current_msg_id -= 1

        if messages_found:
            result = "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ:\n\n" + "\n\n".join(messages_found)

            # Send messages info and delete after 5 seconds
            sent = bot.edit_message_text(result, ADMIN_ID, progress_message.message_id)

            def delete_timer():
                time.sleep(5)
                try:
                    bot.delete_message(ADMIN_ID, message.message_id)
                    bot.delete_message(ADMIN_ID, sent.message_id)
                except Exception as e:
                    logger.error(f"Error deleting messages: {str(e)}")

            threading.Thread(target=delete_timer).start()

        else:
            bot.edit_message_text("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", ADMIN_ID, progress_message.message_id)

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}"
        logger.error(error_msg)
        bot.send_message(ADMIN_ID, error_msg)


def main():
    try:
        initialize_db()
        logger.info("Bot started")
        send_admin_log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        while True:
            try:
                bot.polling(none_stop=True, timeout=60)
            except Exception as polling_error:
                logger.error(f"Polling error: {str(polling_error)}")
                time.sleep(5)
    except Exception as e:
        logger.error(f"Bot error: {str(e)}")
    finally:
        try:
            bot.stop_polling()
        except:
            pass


if __name__ == '__main__':
    main()
